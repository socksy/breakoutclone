\documentclass{report}
\setcounter{chapter}{0}
\usepackage{graphicx}

\begin{document}
\title{Breakout}
\author{100004004}

\maketitle
\tableofcontents

\chapter{Introduction}
\section{A little background}

\paragraph{}The game "Breakout" originated from the ancient age of arcade games, a time in which people would aimlessly fiddle with a mechanical stick in order to produce different series of lights from a box within a cabinet. It was commissioned by Atari, as a single player alternative to the popular multiplayer game "Pong", to a certain man who would later be known to be one of the most influential men in the computing and tech industry; and of which he was first recognised to have demonstrated his excellent power at exploiting other people.

\paragraph{}Breakout consists of a wall of bricks, of which a ball is hit against. By hitting the ball against the wall, the bricks would gradually be eroded, allowing for the ball to "breakout". The player manages to rack up points by destroying as many bricks as possible, all the while preventing the ball to hit the floor, by using their bat.

\section{Task}
\paragraph{}The aim of this was to write a clone of the game in Java, and possibly improve upon it. A working game sshould be produced in the style of Breakout or later, more advanced clones such as Arkanoid which introduced exciting new extras such as powerups and advanced level design.

\chapter{Specification}
\paragraph{}The specification attempted includes the following:

\begin{enumerate}

\item Bricks, Paddle and ball making up the well known basics of the game
\item A scoring mechanism of one's own devising
\item Change in paddle size
\item Changes in ball speed
\item Changes in ball angle, depending on where it hits the paddle
\item Extra levels with different arrangements of bricks
\item "Powerups" modifying behaviour

\end{enumerate}
\paragraph{} Some slight changes from the spec:

\begin{enumerate}
\item Model View Controller pattern instead of Model Delegate
\item "Powerups" and paddle size changes are done on completion of levels
\item ball speed, whilst changeable, happens as part of a vector design as opposed to a separate variable
\end{enumerate}

\chapter{Design}
\section{Structure}
\paragraph{}The structure is a Model View Controller design. This allows for a logical split of various parts of the program, and was well suited for the Light Weight Java Game Library, an OpenGL and OpenAL wrapper for Java that was chosen for this project.

\subsection{View}
\paragraph{}The view is where everything rendered from. This was done using OpenGL, with rectangles represented using vertices (and rendered technically with triangle fans, as graphics hardware tends to use triangles rather than quadrilaterals), stored in Vertex Arrays. This allowed for re-use, and instead of specifying exactly where to draw them on the screen, it allowed for relative dimensions, then to be translated later using a translation matrix.

\subsection{Model}
\paragraph{}The model is where all current state data was kept — everything from the score to exact position of each element on the screen. It holds references to every game object, and initialises calls to the controller. Different levels are loaded from files here, with the model populating the ArrayList representing all the blocks.

\subsection{Controller}
\paragraph{}The controller is where all the updates to the model's data take place, taking care of calculations of where the ball should be next, and taking input and moving the paddle's co-ordinates accordingly.

\subsection{Everything else}
\paragraph{} The Main class is a small class that created the initial Model, View and Controller objects. The Game Objects were all extended from a "CollidableObject" class. This allowed for the collision detection to be abstracted away from the workings, and allowed for a relatively clean structure, allowing for individual features on certain class.

\section{Ball Movement}
\paragraph{}The ball was designed to move as a vector. This was done for flexibility — direction could easily be changed, and the x and y components were separate allowing for easing reflection, amongst other things. This also meant that speed was variable, depending on how far the ball was moving in one axis. The direction of which a ball was reflected off a paddle was a function of how far along the paddle it was from the centre — as such, this means that larger paddles means faster balls.
\paragraph{}Issues were raised by this use of movement — as it is moving every update, as opposed to a fixed length of time, it can sometimes speed up and down. One way of solving this is to multiply the change by a delta time since the last update. However, doing ths caused major issues — if no time had passed (in milliseconds), then it would multiply by 0, meaning that it could stay in the same place whilst colliding, and thus collide multiple times, ruining the accuracy of the score and increasing the likelihood of the ball reacting in unrealistic ways (such as moving at $4x10^9$ pixels a second). Eventually such a method was simply scrapped.

\section{Collision Detection}
\paragraph{}Simple bounding box collision detection was used. This appeared to be both fast and adequate for the job, and as such seems like a good a choice.

\section{Level Loading}
\paragraph{}Level loading was done by specifying a grid of 13 columns of identical blocks, differing only in colour and in difficulty to destroy. This was loaded using GSON, a JSON reading library created by Google (advantages include support for generic types, useful for ArrayLists<Generic Type>.

\chapter{Usage}
\section{Screenshot}
\includegraphics[scale=0.4]{screenshot}

\section{To Run}
\paragraph{}It should be fairly simple to run the game, as I have pieced together script files for various platforms. From a command line, either run ./main for linux & mac platforms, or run main.bat on a windows platform.
\paragraph{}Left click to start the ball going, right click to reset. Press left click during game to cheat for testing purposes.

\chapter{Lessons learned}
\paragraph{}The most valuable techniques I learned in this particular project was the use of the OpenGL graphics library (if you allow the tautology). Not a simple library to learn, and one in which nearly all documentation provided online is out of date, or not usable within Java. This also encompassed learning various other things, such as Java's new I/O library use with channels and buffers (java.nio). A missed update call on one revision of code crashed the computer and proceeded to flood the screen with random pixels from the screenbuffer, which was a difficult bug to diagnose (switching between two computers whilst changing one line at a time discovered it in a couple of days).
\paragraph{} Next time I have an opportunity to use OpenGL, I would like to build upon my knowledge by including textures on pictures, and learning the shader language. This would allow for a much prettier and presentable game, and could have allowed for special effects when things such as powerups were collected. Also, I couldn't fix issues with on screen text satisfactorily enough to leave in the game — and as such things such as the score are printed on the command line instead, which leads to a disjointed experience.
\end{document}
